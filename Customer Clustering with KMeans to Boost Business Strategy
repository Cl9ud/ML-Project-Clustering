#Installing Required Libraries
# All Libraries required for this lab are listed below.
!pip install pandas==1.3.4
!pip install scikit-learn==0.20.1

# You can also use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt

#Clustering demo with generated sample data

# Generate sample data for clustering
X, y = make_blobs(n_samples=300, centers=4, cluster_std=0.6, random_state=0)

# X now contains 300 rows of data spread across 4 clusters that was generated by the make_blobs function.
# In real life we would use an existing data set.

# Apply k-means clustering
kmeans = KMeans(n_clusters=4)
kmeans.fit(X)

# Print cluster centers
kmeans.cluster_centers_

# Plot the clusters and cluster centers
plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='*', s=400, color='black')
plt.show()

#Load the data in a csv file into a dataframe
# the data set is available at the url below.
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/customers.csv"

# using the read_csv function in the pandas library, we load the data into a dataframe.

df = pd.read_csv(URL)

#Let's plot the histograms of all columns
df.hist()

#Decide how many clusters to create
#You must tell the KMeans algorithm how many clusters to create out of your data
number_of_clusters = 3

# Create a clustering model
cluster = KMeans(n_clusters = number_of_clusters)

#Train the model on the dataset
result = cluster.fit_transform(df)

#Your model is now trained. Print cluster centers
cluster.cluster_centers_

#Make the predictions and save them into the column "cluster_number"
df['cluster_number'] = cluster.predict(df)

df.sample(5)

#Print the cluster numbers and the number of customers in each cluster
df.cluster_number.value_counts()
